# Calculates the magnetic field for arbitrary objects in two dimensions

from LA import *
import numpy as np
from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import scipy.constants as c

dim = 3

#Creates dim axes, and also a meshgrid if helpful.
def getGrid(dx: float, L: float = 1, Lx=None, Ly=None, Lz=None):
    if Lx == None or Ly == None or Lz == None:
        N = int(L/dx)
        axes = [np.linspace(0, L, N)]*dim
    else:
        L = [Lx, Ly, Lz]
        N = [int(l/dx) for l in L]
        axes = [np.linspace(0, L[i], N[i]) for i in range(dim)]

    grid = np.meshgrid(*axes)

    return axes, grid

# Creates a coefficient matrix for a particular J and axes
def getCoefficientMatrix(axes,dx,J):

    Nx = len(axes[0])
    Ny = len(axes[1])
    Nz = len(axes[2])

    A = np.zeros((4*Nx*Ny*Nz, 4*Nx*Ny*Nz))
    B = np.zeros(4*Nx*Ny*Nz)

    for i in range(0,Nx):
        for j in range(0,Ny):
            for k in range(0,Nz):
                A[k+Nz*j+Ny*Nz*i+0][2+k+Nz*(j+1)+Ny*Nz*i] = 1
                A[k+Nz*j+Ny*Nz*i+0][2+k+Nz*(j-1)+Ny*Nz*i] = -1
                A[k+Nz*j+Ny*Nz*i+0][1+(k+1)+Nz*j+Ny*Nz*i] = -1
                A[k+Nz*j+Ny*Nz*i+0][1+(k-1)+Nz*j+Ny*Nz*i] = 1

                A[k+Nz*j+Ny*Nz*i+1][0+(k+1)+Nz*j+Ny*Nz*i] = 1
                A[k+Nz*j+Ny*Nz*i+1][0+(k-1)+Nz*j+Ny*Nz*i] = -1
                A[k+Nz*j+Ny*Nz*i+1][2+k+Nz*j+Ny*Nz*(i+1)] = -1
                A[k+Nz*j+Ny*Nz*i+1][2+k+Nz*j+Ny*Nz*(i-1)] = 1

                A[k+Nz*j+Ny*Nz*i+2][1+k+Nz*j+Ny*Nz*(i+1)] = 1
                A[k+Nz*j+Ny*Nz*i+2][1+k+Nz*j+Ny*Nz*(i-1)] = -1
                A[k+Nz*j+Ny*Nz*i+2][0+k+Nz*(j+1)+Ny*Nz*i] = -1
                A[k+Nz*j+Ny*Nz*i+2][0+k+Nz*(j-1)+Ny*Nz*i] = 1

                A[k+Nz*j+Ny*Nz*i+3][0+k+Nz*j+Ny*Nz*(i+1)] = 1
                A[k+Nz*j+Ny*Nz*i+3][0+k+Nz*j+Ny*Nz*(i-1)] = -1
                A[k+Nz*j+Ny*Nz*i+3][1+k+Nz*(j+1)+Ny*Nz*i] = 1
                A[k+Nz*j+Ny*Nz*i+3][1+k+Nz*(j-1)+Ny*Nz*i] = -1
                A[k+Nz*j+Ny*Nz*i+3][2+(k+1)+Nz*j+Ny*Nz*i] = 1
                A[k+Nz*j+Ny*Nz*i+3][2+(k-1)+Nz*j+Ny*Nz*i] = -1

                B[k+Nz*j+Ny*Nz*i+0] = 2*dx*J[i][j][k][0]*mu0
                B[k+Nz*j+Ny*Nz*i+1] = 2*dx*J[i][j][k][1]*mu0
                B[k+Nz*j+Ny*Nz*i+2] = 2*dx*J[i][j][k][2]*mu0
                B[k+Nz*j+Ny*Nz*i+3] = 0

    return A, B


def getJ(axes,x0=np.array([0.5,0.5,0.5])):

    Nx = len(axes[0])
    Ny = len(axes[1])
    Nz = len(axes[2])

    Jmax = 1

    J = np.zeros((Nx,Ny,Nz,3))

    for i in range(0,Nx):
        J[i][int(Ny/2)][int(Nz/2)] = np.array([1,0,0])
    # for i in range(0, Nx):
    #     for j in range(0, Ny):
    #         for k in range(0, Nz):

    #             if axes[2][k] >= 0.5:
    #                 x = axes[0][i]-x0[0]
    #                 y = axes[1][j]-x0[1]

    #                 if abs(x**2+y**2 - 0.2**2) < 0.01:
    #                     if np.sqrt(x**2 + y**2) != 0:
    #                         J[i][j][k] = Jmax*np.array([-x/np.sqrt(x**2 + y**2),y/np.sqrt(x**2 + y**2),0])
    #                     else: 
    #                         J[i][j][k] = Jmax*np.array([0,0,0])

    return J

def transpose(axes,B):
    Nx = len(axes[0])
    Ny = len(axes[1])
    Nz = len(axes[2])

    Bt = np.zeros((Nx,Ny,Nz,3))
    for i in range(0, Nx):
        for j in range(0, Ny):
            for k in range(0, Nz):
                Bt[i][j][k][0] = B[k+Nz*j+Ny*Nz*i+0]
                Bt[i][j][k][1] = B[k+Nz*j+Ny*Nz*i+1]
                Bt[i][j][k][2] = B[k+Nz*j+Ny*Nz*i+2]

    return Bt


#########################################################
#########################################################
# Simulation Stuff

dx = 0.1
L = 1
mu0 = c.mu_0

axes,grid = getGrid(dx,L=L)
J = getJ(axes)
A,C = getCoefficientMatrix(axes,dx,J)

B = solve(A,C)
B = B.reshape(len(B))
file = open('out.txt', 'w+')
for b in B:
    file.write(str(b)+',')
file.close()
B = transpose(axes,B)

########################################################
########################################################
# Plotting stuff

fig = plt.figure(figsize=(8,8),dpi = 100)

ax = fig.add_subplot(111,projection='3d')
ax.set_xlabel("x-axis")
ax.set_ylabel("y-axis")
ax.set_zlabel("z-axis")
ax.set_title("Magnetic field generated by a current")

ax.set_xlim(0, 1)
ax.set_ylim(0, 1)
ax.set_zlim(0, 1)

print(B.max())

ax.quiver(grid[0], grid[1], grid[2], J[:,:,:,1], J[:,:,:,0], J[:,:,:,2],length=0.1,color='darkblue')
ax.quiver(grid[0], grid[1], grid[2], B[:,:,:,0], B[:,:,:,1], B[:,:,:,2],length=1e-102,color='darkred')

plt.show()
